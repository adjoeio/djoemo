// Code generated by MockGen. DO NOT EDIT.
// Source: metrics_interface.go

// Package mock_djoemo is a generated GoMock package.
package mock

import (
	context "context"
	djoemo "github.com/adjoeio/djoemo"
	gomock "go.uber.org/mock/gomock"
	reflect "reflect"
)

// MockMetricsInterface is a mock of MetricsInterface interface
type MockMetricsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsInterfaceMockRecorder
}

// MockMetricsInterfaceMockRecorder is the mock recorder for MockMetricsInterface
type MockMetricsInterfaceMockRecorder struct {
	mock *MockMetricsInterface
}

// NewMockMetricsInterface creates a new mock instance
func NewMockMetricsInterface(ctrl *gomock.Controller) *MockMetricsInterface {
	mock := &MockMetricsInterface{ctrl: ctrl}
	mock.recorder = &MockMetricsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricsInterface) EXPECT() *MockMetricsInterfaceMockRecorder {
	return m.recorder
}

// WithContext mocks base method
func (m *MockMetricsInterface) WithContext(ctx context.Context) djoemo.MetricsInterface {
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(djoemo.MetricsInterface)
	return ret0
}

// WithContext indicates an expected call of WithContext
func (mr *MockMetricsInterfaceMockRecorder) WithContext(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockMetricsInterface)(nil).WithContext), ctx)
}

// Publish mocks base method
func (m *MockMetricsInterface) Publish(key, metricName string, metricValue float64) error {
	ret := m.ctrl.Call(m, "Publish", key, metricName, metricValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockMetricsInterfaceMockRecorder) Publish(key, metricName, metricValue interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockMetricsInterface)(nil).Publish), key, metricName, metricValue)
}
